.. Generated automatically by doc/tools/makerst.py in Mole's source tree.
.. DO NOT EDIT THIS FILE, but the doc/base/classes.xml source instead.

.. _class_@MoScript:

@MoScript
=========

**Category:** Core

Brief Description
-----------------

Built-in MoScript functions.

Member Functions
----------------

+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Color<class_color>`                      | :ref:`Color8<class_@MoScript_Color8>`  **(** :ref:`int<class_int>` r8, :ref:`int<class_int>` g8, :ref:`int<class_int>` b8, :ref:`int<class_int>` a8  **)** |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Color<class_color>`                      | :ref:`ColorN<class_@MoScript_ColorN>`  **(** :ref:`String<class_string>` name, :ref:`float<class_float>` alpha  **)**                                      |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`abs<class_@MoScript_abs>`  **(** :ref:`float<class_float>` s  **)**                                                                                  |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`acos<class_@MoScript_acos>`  **(** :ref:`float<class_float>` s  **)**                                                                                |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`asin<class_@MoScript_asin>`  **(** :ref:`float<class_float>` s  **)**                                                                                |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Nil<class_nil>`                          | :ref:`assert<class_@MoScript_assert>`  **(** :ref:`bool<class_bool>` condition  **)**                                                                      |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`atan<class_@MoScript_atan>`  **(** :ref:`float<class_float>` s  **)**                                                                                |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`atan2<class_@MoScript_atan2>`  **(** :ref:`float<class_float>` x, :ref:`float<class_float>` y  **)**                                                 |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_variant>`                  | :ref:`bytes2var<class_@MoScript_bytes2var>`  **(** :ref:`RawArray<class_rawarray>` bytes  **)**                                                            |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`ceil<class_@MoScript_ceil>`  **(** :ref:`float<class_float>` s  **)**                                                                                |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`clamp<class_@MoScript_clamp>`  **(** :ref:`float<class_float>` val, :ref:`float<class_float>` min, :ref:`float<class_float>` max  **)**              |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Object<class_object>`                    | :ref:`convert<class_@MoScript_convert>`  **(** :ref:`Variant<class_variant>` what, :ref:`int<class_int>` type  **)**                                       |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`cos<class_@MoScript_cos>`  **(** :ref:`float<class_float>` s  **)**                                                                                  |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`cosh<class_@MoScript_cosh>`  **(** :ref:`float<class_float>` s  **)**                                                                                |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`db2linear<class_@MoScript_db2linear>`  **(** :ref:`float<class_float>` db  **)**                                                                     |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`decimals<class_@MoScript_decimals>`  **(** :ref:`float<class_float>` step  **)**                                                                     |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`dectime<class_@MoScript_dectime>`  **(** :ref:`float<class_float>` value, :ref:`float<class_float>` amount, :ref:`float<class_float>` step  **)**    |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`deg2rad<class_@MoScript_deg2rad>`  **(** :ref:`float<class_float>` deg  **)**                                                                        |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Object<class_object>`                    | :ref:`dict2inst<class_@MoScript_dict2inst>`  **(** :ref:`Dictionary<class_dictionary>` dict  **)**                                                         |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`ease<class_@MoScript_ease>`  **(** :ref:`float<class_float>` s, :ref:`float<class_float>` curve  **)**                                               |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`exp<class_@MoScript_exp>`  **(** :ref:`float<class_float>` s  **)**                                                                                  |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`floor<class_@MoScript_floor>`  **(** :ref:`float<class_float>` s  **)**                                                                              |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`fmod<class_@MoScript_fmod>`  **(** :ref:`float<class_float>` x, :ref:`float<class_float>` y  **)**                                                   |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`fposmod<class_@MoScript_fposmod>`  **(** :ref:`float<class_float>` x, :ref:`float<class_float>` y  **)**                                             |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`FuncRef<class_funcref>`                  | :ref:`funcref<class_@MoScript_funcref>`  **(** :ref:`Object<class_object>` instance, :ref:`String<class_string>` funcname  **)**                           |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                          | :ref:`hash<class_@MoScript_hash>`  **(** :ref:`Variant<class_variant>` var:Variant  **)**                                                                  |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Dictionary<class_dictionary>`            | :ref:`inst2dict<class_@MoScript_inst2dict>`  **(** :ref:`Object<class_object>` inst  **)**                                                                 |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Object<class_object>`                    | :ref:`instance_from_id<class_@MoScript_instance_from_id>`  **(** :ref:`int<class_int>` instance_id  **)**                                                  |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`is_inf<class_@MoScript_is_inf>`  **(** :ref:`float<class_float>` s  **)**                                                                            |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`is_nan<class_@MoScript_is_nan>`  **(** :ref:`float<class_float>` s  **)**                                                                            |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`lerp<class_@MoScript_lerp>`  **(** :ref:`float<class_float>` from, :ref:`float<class_float>` to, :ref:`float<class_float>` weight  **)**             |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`linear2db<class_@MoScript_linear2db>`  **(** :ref:`float<class_float>` nrg  **)**                                                                    |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Resource<class_resource>`                | :ref:`load<class_@MoScript_load>`  **(** :ref:`String<class_string>` path  **)**                                                                           |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`log<class_@MoScript_log>`  **(** :ref:`float<class_float>` s  **)**                                                                                  |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`max<class_@MoScript_max>`  **(** :ref:`float<class_float>` a, :ref:`float<class_float>` b  **)**                                                     |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`min<class_@MoScript_min>`  **(** :ref:`float<class_float>` a, :ref:`float<class_float>` b  **)**                                                     |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                          | :ref:`nearest_po2<class_@MoScript_nearest_po2>`  **(** :ref:`int<class_int>` val  **)**                                                                    |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`pow<class_@MoScript_pow>`  **(** :ref:`float<class_float>` x, :ref:`float<class_float>` y  **)**                                                     |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Resource<class_resource>`                | :ref:`preload<class_@MoScript_preload>`  **(** :ref:`String<class_string>` path  **)**                                                                     |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Nil<class_nil>`                          | :ref:`print<class_@MoScript_print>`  **(** :ref:`Variant<class_variant>` what, :ref:`Variant<class_variant>` ...  **)**                                    |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Nil<class_nil>`                          | :ref:`print_stack<class_@MoScript_print_stack>`  **(** **)**                                                                                               |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Nil<class_nil>`                          | :ref:`printerr<class_@MoScript_printerr>`  **(** :ref:`Variant<class_variant>` what, :ref:`Variant<class_variant>` ...  **)**                              |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Nil<class_nil>`                          | :ref:`printraw<class_@MoScript_printraw>`  **(** :ref:`Variant<class_variant>` what, :ref:`Variant<class_variant>` ...  **)**                              |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Nil<class_nil>`                          | :ref:`prints<class_@MoScript_prints>`  **(** :ref:`Variant<class_variant>` what, :ref:`Variant<class_variant>` ...  **)**                                  |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Nil<class_nil>`                          | :ref:`printt<class_@MoScript_printt>`  **(** :ref:`Variant<class_variant>` what, :ref:`Variant<class_variant>` ...  **)**                                  |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`rad2deg<class_@MoScript_rad2deg>`  **(** :ref:`float<class_float>` rad  **)**                                                                        |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`rand_range<class_@MoScript_rand_range>`  **(** :ref:`float<class_float>` from, :ref:`float<class_float>` to  **)**                                   |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_array>`                      | :ref:`rand_seed<class_@MoScript_rand_seed>`  **(** :ref:`int<class_int>` seed  **)**                                                                       |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`randf<class_@MoScript_randf>`  **(** **)**                                                                                                           |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                          | :ref:`randi<class_@MoScript_randi>`  **(** **)**                                                                                                           |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Nil<class_nil>`                          | :ref:`randomize<class_@MoScript_randomize>`  **(** **)**                                                                                                   |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_array>`                      | :ref:`range<class_@MoScript_range>`  **(** :ref:`Variant<class_variant>` ...  **)**                                                                        |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`round<class_@MoScript_round>`  **(** :ref:`float<class_float>` s  **)**                                                                              |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Nil<class_nil>`                          | :ref:`seed<class_@MoScript_seed>`  **(** :ref:`int<class_int>` seed  **)**                                                                                 |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`sign<class_@MoScript_sign>`  **(** :ref:`float<class_float>` s  **)**                                                                                |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`sin<class_@MoScript_sin>`  **(** :ref:`float<class_float>` s  **)**                                                                                  |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`sinh<class_@MoScript_sinh>`  **(** :ref:`float<class_float>` s  **)**                                                                                |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`sqrt<class_@MoScript_sqrt>`  **(** :ref:`float<class_float>` s  **)**                                                                                |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`stepify<class_@MoScript_stepify>`  **(** :ref:`float<class_float>` s, :ref:`float<class_float>` step  **)**                                          |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_string>`                    | :ref:`str<class_@MoScript_str>`  **(** :ref:`Variant<class_variant>` what, :ref:`Variant<class_variant>` ...  **)**                                        |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_variant>`                  | :ref:`str2var<class_@MoScript_str2var>`  **(** :ref:`String<class_string>` string  **)**                                                                   |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`tan<class_@MoScript_tan>`  **(** :ref:`float<class_float>` s  **)**                                                                                  |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`tanh<class_@MoScript_tanh>`  **(** :ref:`float<class_float>` s  **)**                                                                                |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                        | :ref:`type_exists<class_@MoScript_type_exists>`  **(** :ref:`String<class_string>` type  **)**                                                             |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                          | :ref:`typeof<class_@MoScript_typeof>`  **(** :ref:`Variant<class_variant>` what  **)**                                                                     |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`RawArray<class_rawarray>`                | :ref:`var2bytes<class_@MoScript_var2bytes>`  **(** :ref:`Variant<class_variant>` var  **)**                                                                |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_string>`                    | :ref:`var2str<class_@MoScript_var2str>`  **(** :ref:`Variant<class_variant>` var  **)**                                                                    |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`WeakRef<class_weakref>`                  | :ref:`weakref<class_@MoScript_weakref>`  **(** :ref:`Object<class_object>` obj  **)**                                                                      |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`MoFunctionState<class_mofunctionstate>`  | :ref:`yield<class_@MoScript_yield>`  **(** :ref:`Object<class_object>` object, :ref:`String<class_string>` signal  **)**                                   |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+

Numeric Constants
-----------------

- **PI** = **3.141593** --- Constant that represents how many times the diameter of a circumference fits around its perimeter.

Description
-----------

This contains the list of built-in moscript functions. Mostly math functions and other utilities. Everything else is expanded by objects.

Member Function Description
---------------------------

.. _class_@MoScript_Color8:

- :ref:`Color<class_color>`  **Color8**  **(** :ref:`int<class_int>` r8, :ref:`int<class_int>` g8, :ref:`int<class_int>` b8, :ref:`int<class_int>` a8  **)**

Make a color from red, green, blue and alpha. Arguments can range from 0 to 255.

.. _class_@MoScript_ColorN:

- :ref:`Color<class_color>`  **ColorN**  **(** :ref:`String<class_string>` name, :ref:`float<class_float>` alpha  **)**

.. _class_@MoScript_abs:

- :ref:`float<class_float>`  **abs**  **(** :ref:`float<class_float>` s  **)**

Remove sign (works for integer and float).

.. _class_@MoScript_acos:

- :ref:`float<class_float>`  **acos**  **(** :ref:`float<class_float>` s  **)**

Arc-cosine.

.. _class_@MoScript_asin:

- :ref:`float<class_float>`  **asin**  **(** :ref:`float<class_float>` s  **)**

Arc-sine.

.. _class_@MoScript_assert:

- :ref:`Nil<class_nil>`  **assert**  **(** :ref:`bool<class_bool>` condition  **)**

Assert that the condition is true. If the condition is false, generates an error.

.. _class_@MoScript_atan:

- :ref:`float<class_float>`  **atan**  **(** :ref:`float<class_float>` s  **)**

Arc-tangent.

.. _class_@MoScript_atan2:

- :ref:`float<class_float>`  **atan2**  **(** :ref:`float<class_float>` x, :ref:`float<class_float>` y  **)**

Arc-tangent that takes a 2D vector as argument, returns the full -pi to +pi range.

.. _class_@MoScript_bytes2var:

- :ref:`Variant<class_variant>`  **bytes2var**  **(** :ref:`RawArray<class_rawarray>` bytes  **)**

Decode a byte array back to a value.

.. _class_@MoScript_ceil:

- :ref:`float<class_float>`  **ceil**  **(** :ref:`float<class_float>` s  **)**

Ceiling (rounds up to nearest integer).

.. _class_@MoScript_clamp:

- :ref:`float<class_float>`  **clamp**  **(** :ref:`float<class_float>` val, :ref:`float<class_float>` min, :ref:`float<class_float>` max  **)**

Clamp both values to a range.

.. _class_@MoScript_convert:

- :ref:`Object<class_object>`  **convert**  **(** :ref:`Variant<class_variant>` what, :ref:`int<class_int>` type  **)**

Convert from a type to another in the best way possible. The "type" parameter uses the enum TYPE\_\* in :ref:`@Global Scope<class_@global scope>`.

.. _class_@MoScript_cos:

- :ref:`float<class_float>`  **cos**  **(** :ref:`float<class_float>` s  **)**

Standard cosine function.

.. _class_@MoScript_cosh:

- :ref:`float<class_float>`  **cosh**  **(** :ref:`float<class_float>` s  **)**

Hyperbolic cosine.

.. _class_@MoScript_db2linear:

- :ref:`float<class_float>`  **db2linear**  **(** :ref:`float<class_float>` db  **)**

Convert from decibels to linear energy (audio).

.. _class_@MoScript_decimals:

- :ref:`float<class_float>`  **decimals**  **(** :ref:`float<class_float>` step  **)**

Return the amount of decimals in the floating point value.

.. _class_@MoScript_dectime:

- :ref:`float<class_float>`  **dectime**  **(** :ref:`float<class_float>` value, :ref:`float<class_float>` amount, :ref:`float<class_float>` step  **)**

Decreases time by a specified amount.

.. _class_@MoScript_deg2rad:

- :ref:`float<class_float>`  **deg2rad**  **(** :ref:`float<class_float>` deg  **)**

Convert from degrees to radians.

.. _class_@MoScript_dict2inst:

- :ref:`Object<class_object>`  **dict2inst**  **(** :ref:`Dictionary<class_dictionary>` dict  **)**

Convert a previously converted instances to dictionary back into an instance. Useful for deserializing.

.. _class_@MoScript_ease:

- :ref:`float<class_float>`  **ease**  **(** :ref:`float<class_float>` s, :ref:`float<class_float>` curve  **)**

Easing function, based on exponent. 0 is constant, 1 is linear, 0 to 1 is ease-in, 1+ is ease out. Negative values are in-out/out in.

.. _class_@MoScript_exp:

- :ref:`float<class_float>`  **exp**  **(** :ref:`float<class_float>` s  **)**

Exponential logarithm.

.. _class_@MoScript_floor:

- :ref:`float<class_float>`  **floor**  **(** :ref:`float<class_float>` s  **)**

Floor (rounds down to nearest integer).

.. _class_@MoScript_fmod:

- :ref:`float<class_float>`  **fmod**  **(** :ref:`float<class_float>` x, :ref:`float<class_float>` y  **)**

Module (remainder of x/y).

.. _class_@MoScript_fposmod:

- :ref:`float<class_float>`  **fposmod**  **(** :ref:`float<class_float>` x, :ref:`float<class_float>` y  **)**

Module (remainder of x/y) that wraps equally in positive and negative.

.. _class_@MoScript_funcref:

- :ref:`FuncRef<class_funcref>`  **funcref**  **(** :ref:`Object<class_object>` instance, :ref:`String<class_string>` funcname  **)**

Return a reference to the specified function.

.. _class_@MoScript_hash:

- :ref:`int<class_int>`  **hash**  **(** :ref:`Variant<class_variant>` var:Variant  **)**

Hash the variable passed and return an integer.

.. _class_@MoScript_inst2dict:

- :ref:`Dictionary<class_dictionary>`  **inst2dict**  **(** :ref:`Object<class_object>` inst  **)**

Convert a script class instance to a dictionary (useful for serializing).

.. _class_@MoScript_instance_from_id:

- :ref:`Object<class_object>`  **instance_from_id**  **(** :ref:`int<class_int>` instance_id  **)**

Get an object by its ID.

.. _class_@MoScript_is_inf:

- :ref:`float<class_float>`  **is_inf**  **(** :ref:`float<class_float>` s  **)**

.. _class_@MoScript_is_nan:

- :ref:`float<class_float>`  **is_nan**  **(** :ref:`float<class_float>` s  **)**

.. _class_@MoScript_lerp:

- :ref:`float<class_float>`  **lerp**  **(** :ref:`float<class_float>` from, :ref:`float<class_float>` to, :ref:`float<class_float>` weight  **)**

Linear interpolates between two values by a normalized value.

.. _class_@MoScript_linear2db:

- :ref:`float<class_float>`  **linear2db**  **(** :ref:`float<class_float>` nrg  **)**

Convert from linear energy to decibels (audio).

.. _class_@MoScript_load:

- :ref:`Resource<class_resource>`  **load**  **(** :ref:`String<class_string>` path  **)**

Load a resource from the filesystem, pass a valid path as argument.

.. _class_@MoScript_log:

- :ref:`float<class_float>`  **log**  **(** :ref:`float<class_float>` s  **)**

Natural logarithm.

.. _class_@MoScript_max:

- :ref:`float<class_float>`  **max**  **(** :ref:`float<class_float>` a, :ref:`float<class_float>` b  **)**

Return the maximum of two values.

.. _class_@MoScript_min:

- :ref:`float<class_float>`  **min**  **(** :ref:`float<class_float>` a, :ref:`float<class_float>` b  **)**

Return the minimum of two values.

.. _class_@MoScript_nearest_po2:

- :ref:`int<class_int>`  **nearest_po2**  **(** :ref:`int<class_int>` val  **)**

Return the nearest larger power of 2 for an integer.

.. _class_@MoScript_pow:

- :ref:`float<class_float>`  **pow**  **(** :ref:`float<class_float>` x, :ref:`float<class_float>` y  **)**

Power function, x elevate to y.

.. _class_@MoScript_preload:

- :ref:`Resource<class_resource>`  **preload**  **(** :ref:`String<class_string>` path  **)**

Preload a resource from the filesystem. The resource is loaded during script parsing.

.. _class_@MoScript_print:

- :ref:`Nil<class_nil>`  **print**  **(** :ref:`Variant<class_variant>` what, :ref:`Variant<class_variant>` ...  **)**

Print one or more arguments to strings in the best way possible to a console line.

.. _class_@MoScript_print_stack:

- :ref:`Nil<class_nil>`  **print_stack**  **(** **)**

Print a stack track at code location, only works when running with debugger turned on.

.. _class_@MoScript_printerr:

- :ref:`Nil<class_nil>`  **printerr**  **(** :ref:`Variant<class_variant>` what, :ref:`Variant<class_variant>` ...  **)**

Print one or more arguments to strings in the best way possible to standard error line.

.. _class_@MoScript_printraw:

- :ref:`Nil<class_nil>`  **printraw**  **(** :ref:`Variant<class_variant>` what, :ref:`Variant<class_variant>` ...  **)**

Print one or more arguments to strings in the best way possible to console. No newline is added at the end.

.. _class_@MoScript_prints:

- :ref:`Nil<class_nil>`  **prints**  **(** :ref:`Variant<class_variant>` what, :ref:`Variant<class_variant>` ...  **)**

Print one or more arguments to the console with a space between each argument.

.. _class_@MoScript_printt:

- :ref:`Nil<class_nil>`  **printt**  **(** :ref:`Variant<class_variant>` what, :ref:`Variant<class_variant>` ...  **)**

Print one or more arguments to the console with a tab between each argument.

.. _class_@MoScript_rad2deg:

- :ref:`float<class_float>`  **rad2deg**  **(** :ref:`float<class_float>` rad  **)**

Convert from radians to degrees.

.. _class_@MoScript_rand_range:

- :ref:`float<class_float>`  **rand_range**  **(** :ref:`float<class_float>` from, :ref:`float<class_float>` to  **)**

Random range, any floating point value between 'from' and 'to'

.. _class_@MoScript_rand_seed:

- :ref:`Array<class_array>`  **rand_seed**  **(** :ref:`int<class_int>` seed  **)**

Random from seed, pass a seed and an array with both number and new seed is returned.

.. _class_@MoScript_randf:

- :ref:`float<class_float>`  **randf**  **(** **)**

Random value (0 to 1 float).

.. _class_@MoScript_randi:

- :ref:`int<class_int>`  **randi**  **(** **)**

Random 32 bits value (integer). To obtain a value	from 0 to N, you can use remainder, like (for random from 0 to 19): randi() % 20.

.. _class_@MoScript_randomize:

- :ref:`Nil<class_nil>`  **randomize**  **(** **)**

Reset the seed of the random number generator with a new, different one.

.. _class_@MoScript_range:

- :ref:`Array<class_array>`  **range**  **(** :ref:`Variant<class_variant>` ...  **)**

Return an array with the given range. Range can be 1 argument N (0 to N-1), two arguments (initial, final-1) or three arguments (initial, final-1, increment).

.. _class_@MoScript_round:

- :ref:`float<class_float>`  **round**  **(** :ref:`float<class_float>` s  **)**

Round to nearest integer.

.. _class_@MoScript_seed:

- :ref:`Nil<class_nil>`  **seed**  **(** :ref:`int<class_int>` seed  **)**

Set seed for the random number generator.

.. _class_@MoScript_sign:

- :ref:`float<class_float>`  **sign**  **(** :ref:`float<class_float>` s  **)**

Return sign (-1 or +1).

.. _class_@MoScript_sin:

- :ref:`float<class_float>`  **sin**  **(** :ref:`float<class_float>` s  **)**

Standard sine function.

.. _class_@MoScript_sinh:

- :ref:`float<class_float>`  **sinh**  **(** :ref:`float<class_float>` s  **)**

Hyperbolic sine.

.. _class_@MoScript_sqrt:

- :ref:`float<class_float>`  **sqrt**  **(** :ref:`float<class_float>` s  **)**

Square root.

.. _class_@MoScript_stepify:

- :ref:`float<class_float>`  **stepify**  **(** :ref:`float<class_float>` s, :ref:`float<class_float>` step  **)**

Snap float value to a given step.

.. _class_@MoScript_str:

- :ref:`String<class_string>`  **str**  **(** :ref:`Variant<class_variant>` what, :ref:`Variant<class_variant>` ...  **)**

Convert one or more arguments to strings in the best way possible.

.. _class_@MoScript_str2var:

- :ref:`Variant<class_variant>`  **str2var**  **(** :ref:`String<class_string>` string  **)**

Convert a formatted string that was returned by :ref:`var2str<class_@MoScript_var2str>` to the original value.

.. _class_@MoScript_tan:

- :ref:`float<class_float>`  **tan**  **(** :ref:`float<class_float>` s  **)**

Standard tangent function.

.. _class_@MoScript_tanh:

- :ref:`float<class_float>`  **tanh**  **(** :ref:`float<class_float>` s  **)**

Hyperbolic tangent.

.. _class_@MoScript_type_exists:

- :ref:`bool<class_bool>`  **type_exists**  **(** :ref:`String<class_string>` type  **)**

.. _class_@MoScript_typeof:

- :ref:`int<class_int>`  **typeof**  **(** :ref:`Variant<class_variant>` what  **)**

Return the internal type of the given Variant object, using the TYPE\_\* enum in :ref:`@Global Scope<class_@global scope>`.

.. _class_@MoScript_var2bytes:

- :ref:`RawArray<class_rawarray>`  **var2bytes**  **(** :ref:`Variant<class_variant>` var  **)**

Encode a variable value to a byte array.

.. _class_@MoScript_var2str:

- :ref:`String<class_string>`  **var2str**  **(** :ref:`Variant<class_variant>` var  **)**

Convert a value to a formatted string that can later be parsed using :ref:`str2var<class_@MoScript_str2var>`.

.. _class_@MoScript_weakref:

- :ref:`WeakRef<class_weakref>`  **weakref**  **(** :ref:`Object<class_object>` obj  **)**

Return a weak reference to an object.

.. _class_@MoScript_yield:

- :ref:`MoFunctionState<class_mofunctionstate>`  **yield**  **(** :ref:`Object<class_object>` object, :ref:`String<class_string>` signal  **)**

Stop the function execution and return the current state. Call :ref:`MoFunctionState.resume<class_MoFunctionState_resume>` on the state to resume execution. This invalidates the state.

Returns anything that was passed to the resume function call. If passed an object and a signal, the execution is resumed when the object's signal is emmited.


